LiveEventStreamPlayer {
}

StreamEvent : Event {

	pre {
		
	}
	
	getSlots {
	
	}

	embedInStream {
		if( parent.isNil ) {
			parent = defaultParentEvent;
		};
		^this.use({ Routine.new(this[\play]).embedInStream })
	}
}

Slot {
}

+Environment {
	value {
		| a |
		a.postln;
		^this
	}

	pr {
		| parentKeys=nil |
		^Proto(nil, this, parentKeys)
	}

	se {
		^StreamEvent.new.composeEvents(this)
	}
	
	<< {
		| e |
		^this.copy.putAll(e)
	}
}

+Proto {
	<< {
		| e |
		^this.copy.putAll(e)
	}
}

+IdentityDictionary {
	transformEvent {
		| event |
		event.putAll(this);
		^event
	}
}

/*
+Proto {
	<< {
		|p|
		^this.clone.putAll(p)
	}
	
	printOn {
		| stream, itemsPerLine=5 |
		var max, itemsPerLinem1, i=0;
		stream << "Proto";
		itemsPerLinem1 = itemsPerLine - 1;
		max = env.size;
		stream << "( ";
		env.keysValuesDo({ arg key, val; 
			stream <<< key << ": " << val; 
			if ((i=i+1) < max, { stream.comma.space;
				if (i % itemsPerLine == itemsPerLinem1, { stream.nl.space.space });
			});
		});
		stream << " )";
	}
}
*/
