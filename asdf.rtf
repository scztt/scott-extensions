{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green102\blue0;\red0\green0\blue0;\red0\green0\blue179;
\red128\green0\blue0;\red179\green0\blue179;\red102\green0\blue102;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 ////////////////////////////////////////////////////\cf3 \
\cf2 // Surround UI test code - adobe\cf3 \
\
(\
	\cf4 var\cf3  wind, user, top, sliderWidth;\
	\cf4 var\cf3  center, radius, thetaList;\
	\cf4 var\cf3  puckPos, rotationPuckPos;\
	\
	\cf4 var\cf3  fDrawCircle, fUpdateInputs, fGetSourceVolAtTheta;\
	\cf4 var\cf3  draggingPuck=\cf4 false\cf3 , draggingRotationPuck=\cf4 false\cf3 ;\
	\cf4 var\cf3  inputs;\
		\
	inputs = \cf4 List\cf3 .new;\
	inputs.add( ( \cf5 \\initialTheta\cf3 : \cf6 130\cf3 /\cf6 360\cf3 *\cf6 2\cf3 *pi, 	\cf5 \\theta\cf3 : [\cf6 0\cf3 ,\cf6 0\cf3 ], \cf5 \\spread\cf3 : \cf6 0.3\cf3 , \cf5 \\amp\cf3 :\cf6 1 \cf3 ) );\
	inputs.add( ( \cf5 \\initialTheta\cf3 : \cf6 30\cf3 /\cf6 360\cf3 *\cf6 2\cf3 *pi, 	\cf5 \\theta\cf3 : [\cf6 0\cf3 ,\cf6 0\cf3 ], \cf5 \\spread\cf3 : \cf6 0.175\cf3 , \cf5 \\amp\cf3 :\cf6 1 \cf3 ) );\
	inputs.add( ( \cf5 \\initialTheta\cf3 : \cf6 0\cf3 , 				\cf5 \\theta\cf3 : [\cf6 0\cf3 ,\cf6 0\cf3 ], \cf5 \\spread\cf3 : \cf6 0.15\cf3 , \cf5 \\amp\cf3 :\cf6 1 \cf3 ) );\
	inputs.add( ( \cf5 \\initialTheta\cf3 : \cf6 -30\cf3 /\cf6 360\cf3 *\cf6 2\cf3 *pi,	\cf5 \\theta\cf3 : [\cf6 0\cf3 ,\cf6 0\cf3 ], \cf5 \\spread\cf3 : \cf6 0.175\cf3 , \cf5 \\amp\cf3 :\cf6 1 \cf3 ) );\
	inputs.add( ( \cf5 \\initialTheta\cf3 : \cf6 -130\cf3 /\cf6 360\cf3 *\cf6 2\cf3 *pi, 	\cf5 \\theta\cf3 : [\cf6 0\cf3 ,\cf6 0\cf3 ], \cf5 \\spread\cf3 : \cf6 0.3\cf3 , \cf5 \\amp\cf3 :\cf6 1 \cf3 ) );\
	thetaList = (\cf6 0\cf3 ,\cf6 0.05\cf3 ..\cf6 2\cf3 )*pi;\
\
	wind = \cf4 SCWindow\cf3 ().front;\
	user = \cf4 SCUserView\cf3 ( wind, wind.view.bounds );\
	wind.bounds = wind.bounds.resizeBy(\cf6 0\cf3 , \cf6 200\cf3 );\
	\
	top = user.bounds.bottom+\cf6 10\cf3 ;\
	sliderWidth = user.bounds.width-\cf6 10\cf3 ;\
	\
	\cf4 SCSlider\cf3 (wind, \cf4 Rect\cf3 ( \cf6 5\cf3 , top, sliderWidth, \cf6 15 \cf3 ))\
		.action_(\{\
		\});\
	top = top+\cf6 20\cf3 ;\
	\
	\cf4 SCSlider\cf3 (wind, \cf4 Rect\cf3 ( \cf6 5\cf3 , top, sliderWidth, \cf6 15 \cf3 )); \
	top = top+\cf6 20\cf3 ;\
\
	\cf4 SCSlider\cf3 (wind, \cf4 Rect\cf3 ( \cf6 5\cf3 , top, sliderWidth, \cf6 15 \cf3 )); \
	top = top+\cf6 20\cf3 ;\
	\
	radius = user.bounds.width/\cf6 2\cf3 ;\
	center = user.bounds.center;\
	puckPos = \cf6 0.5\cf3 @\cf6 0.25\cf3 ;\
	rotationPuckPos = \cf4 Polar\cf3 ( \cf6 0.5\cf3 , \cf6 0 \cf3 );\
	\
	user.mouseDownAction = \{\
		\cf4 | view, x, y |\cf3 \
		\cf4 var\cf3  polarPoint;\
		if( (x@y).dist( puckPos*view.bounds.extent ) < \cf6 8\cf3 , \{\
			draggingPuck = \cf4 true\cf3 ;	\
			\cf7 "dragging puck"\cf3 .postln;\
		\},\{\
			polarPoint = (((x@y)/view.bounds.extent)-(\cf6 0.5\cf3 @\cf6 0.5\cf3 )).asPolar.rho_(\cf6 0.5\cf3 );\
			if( polarPoint.asPoint.dist(rotationPuckPos.asPoint) < \cf6 20\cf3 , \{\
				draggingRotationPuck = \cf4 true\cf3 ;\
				\cf7 "draggingRotationPuck"\cf3 .postln;\
			\})\
		\});\
	\};\
	\
	user.mouseUpAction = \{ draggingPuck = draggingRotationPuck = \cf4 false\cf3  \};\
	\
	user.mouseMoveAction = \{\
		\cf4 | view, x, y |\cf3 \
		if( draggingPuck, \{\
			puckPos = (x@y)/view.bounds.extent;		\
			if( (puckPos-(\cf6 0.5\cf3 @\cf6 0.5\cf3 )).rho > \cf6 0.5\cf3 , \{\
				puckPos = (puckPos-(\cf6 0.5\cf3 @\cf6 0.5\cf3 )).asPolar.rho_(\cf6 0.5\cf3 ).asPoint + (\cf6 0.5\cf3 @\cf6 0.5\cf3 );\
			\});\
			fUpdateInputs.value();\
			user.refresh();\
		\});\
		\
		if( draggingRotationPuck, \{\
			rotationPuckPos = (((x@y)/view.bounds.extent)-(\cf6 0.5\cf3 @\cf6 0.5\cf3 )).asPolar.rho_(\cf6 0.5\cf3 );\
			fUpdateInputs.value();\
			user.refresh();\
		\})		\
	\};\
	\
	fUpdateInputs = \{\
		\cf4 var\cf3  adjPos = (puckPos - (\cf6 0.5\cf3 @\cf6 0.5\cf3 ));\
		\cf4 var\cf3  convergeAmt = adjPos.rho*\cf6 2\cf3 ;\
		\cf4 var\cf3  skewAmt, moveAmt, adjMoveAmt, moveAmtCurve, diff;\
		\cf4 var\cf3  dTheta = adjPos.theta;\
		\cf4 var\cf3  rotTheta = rotationPuckPos.theta;	\
		\
		if( convergeAmt > \cf6 0.0\cf3 , \{\
			moveAmt = (convergeAmt*pi).cos;\
			moveAmt = moveAmt *\
				if( moveAmt<\cf6 0\cf3 , \{ moveAmt*\cf6 0.2\cf3 .neg \}, \{\cf6 1\cf3 \}) + \cf6 0.2 \cf3 / \cf6 1.2\cf3 ;\
			moveAmt = \cf6 1 \cf3 - moveAmt;\
			\cf7 "\\n\\n\\n"\cf3 .postln;\
			inputs.do(\{\
				\cf4 | input |\cf3 \
				\cf2 // 0\cf3 \
				diff = (input.initialTheta - input.spread + rotTheta).diffCircle(dTheta);\
				moveAmtCurve = (\cf6 1\cf3 -((diff.abs/\cf6 2\cf3 ).cos**\cf6 0.01\cf3 )) * \cf6 154\cf3 ;\
				adjMoveAmt = moveAmt * (moveAmt**moveAmtCurve);\
				input.theta[\cf6 0\cf3 ] = (input.initialTheta - input.spread + rotTheta ) +\
					(adjMoveAmt * diff);\
					\
				\cf2 // 1\cf3 \
				diff = (input.initialTheta + input.spread + rotTheta).diffCircle(dTheta);\
				moveAmtCurve = (\cf6 1\cf3 -((diff.abs/\cf6 2\cf3 ).cos**\cf6 0.01\cf3 )) * \cf6 154\cf3 ;\
				adjMoveAmt = moveAmt * (moveAmt**moveAmtCurve);\
				input.theta[\cf6 1\cf3 ] = (input.initialTheta + input.spread + rotTheta ) +\
					(adjMoveAmt * diff);\
			\});\
			thetaList = ((\cf6 0\cf3 ,\cf6 0.01\cf3 ..\cf6 2\cf3 )*pi).collect(\{\
				\cf4 | i |\cf3 \
				diff = ((i + rotTheta).diffCircle(dTheta).abs);\
				moveAmtCurve = (\cf6 1\cf3 -((diff.abs/\cf6 2\cf3 ).cos**\cf6 0.01\cf3 )) * \cf6 154\cf3 ;\
				adjMoveAmt = moveAmt * (moveAmt**moveAmtCurve);\
				(i + rotTheta ) +\
					(adjMoveAmt * (i + rotTheta).diffCircle(dTheta));\
			\});\
		\});\
	\};\
\
	fGetSourceVolAtTheta = \{\
		\cf4 | source, theta |\cf3 \
		\cf4 var\cf3  dist = min( (source.theta - theta).abs, (source.theta-(\cf6 2\cf3 *pi)-theta).abs );\
		( (dist/source.spread).max(\cf6 -1\cf3 ).min(\cf6 1\cf3 )*\cf6 2\cf3 *pi ).cos*\cf6 0.5\cf3 +\cf6 0.5\cf3 ;\
	\};\
	\
	fDrawCircle = \{\
		\cf4 | view |\cf3 \
		\cf4 var\cf3  volumePent = \cf4 List\cf3 .new;\
		\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .grey(\cf6 0.3\cf3 );\
		\cf4 Pen\cf3 .fillOval( view.bounds );\
		\cf4 Pen\cf3 .strokeColor = \cf4 Color\cf3 .grey;\
		\cf4 Pen\cf3 .strokeOval( view.bounds.insetBy( view.bounds.width/\cf6 4\cf3 , view.bounds.width/\cf6 4 \cf3 ) );\
\
		\cf2 // draw input wedges\cf3 \
		\cf4 Pen\cf3 .translate( center.x, center.y );\
		\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .grey(\cf6 0.5\cf3 ).alpha_(\cf6 0.5\cf3 );\
		inputs.do(\{\
			\cf4 | input, i |\cf3 \
			\cf4 var\cf3  startT, incrementT, thetaDiff;\
			\
			thetaDiff = input.theta[\cf6 0\cf3 ].diffCircle(input.theta[\cf6 1\cf3 ]).abs;\
			\
			if( input.theta[\cf6 0\cf3 ].diffCircle(input.theta[\cf6 1\cf3 ]).abs < \cf6 0.2\cf3 , \{\
				startT = min(input.theta[\cf6 0\cf3 ],input.theta[\cf6 1\cf3 ]) + (thetaDiff/\cf6 2\cf3 ) - \cf6 0.1\cf3 ;\
				incrementT = \cf6 0.2\cf3 /\cf6 40.0\cf3 ;\
			\},\{\
				startT = input.theta[\cf6 0\cf3 ];\
				incrementT = (input.theta[\cf6 1\cf3 ] - input.theta[\cf6 0\cf3 ])/\cf6 40\cf3 ;\
			\});\
			\
			volumePent.add( \cf4 Polar\cf3 ( input.amp*\cf6 100\cf3 , input.theta[\cf6 1\cf3 ] ));\
			volumePent.add( \cf4 Polar\cf3 ( input.amp*\cf6 100\cf3 , input.theta[\cf6 0\cf3 ] ));\
\
			\cf4 Pen\cf3 .push();\
				\cf6 40\cf3 .do(\{\
					\cf4 |i|\cf3 \
					\cf4 Pen\cf3 .addAnnularWedge( \cf6 0\cf3 @\cf6 0\cf3 , radius-( (i/\cf6 40.0\cf3 *pi).sin*\cf6 50\cf3 *input.amp), \
						radius, startT, incrementT );\
					startT = startT + incrementT;\
				\});\
				\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .hsv( i*\cf6 0.17\cf3 , \cf6 0.9\cf3 , \cf6 0.9\cf3 , \cf6 0.4 \cf3 );\
				\cf4 Pen\cf3 .fill();\
				\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .black.alpha_(\cf6 0.1\cf3 );\
				\cf4 Pen\cf3 .addAnnularWedge( \cf6 0\cf3 @\cf6 0\cf3 , radius-\cf6 100\cf3 , \
					radius, input.theta[\cf6 0\cf3 ], input.theta[\cf6 1\cf3 ]-input.theta[\cf6 0\cf3 ] );\
				\cf4 Pen\cf3 .fill();\
			\cf4 Pen\cf3 .pop();\
		\});\
\
		\cf2 // draw puck\cf3 \
		\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .black;\
		\cf4 Pen\cf3 .fillRect( \cf4 Rect\cf3 .aboutPoint((puckPos-(\cf6 0.5\cf3 @\cf6 0.5\cf3 ))*view.bounds.extent, \cf6 4\cf3 , \cf6 4 \cf3 ) );\
\
		\cf2 // draw rotation puck\cf3 \
		\cf4 Pen\cf3 .push;\
			\cf4 Pen\cf3 .rotate( rotationPuckPos.theta+(pi/\cf6 2\cf3 ) );\
			\cf4 Pen\cf3 .fillColor = \cf4 Color\cf3 .black;\
			\cf4 Pen\cf3 .fillRect( \cf4 Rect\cf3 .aboutPoint((\cf6 0\cf3 @\cf6 0.5\cf3 .neg)*view.bounds.extent, \cf6 4\cf3 , \cf6 8 \cf3 ) );\
		\cf4 Pen\cf3 .pop;\
		\
		\cf4 Pen\cf3 .push;\
			\cf4 Pen\cf3 .strokeColor = \cf4 Color\cf3 .black.alpha_(\cf6 0.05\cf3 );\
			thetaList.do(\{\
				\cf4 | theta |\cf3 \
				\cf4 Pen\cf3 .line( \cf6 0\cf3 @\cf6 0\cf3 , \cf4 Polar\cf3 (\cf6 200\cf3 , theta).asPoint );\
			\});\
			\cf4 Pen\cf3 .stroke;\
		\cf4 Pen\cf3 .pop;\
	\};\
	user.drawFunc_(fDrawCircle);	\
	\
	fUpdateInputs.value();\
	user.refresh();	\
)\
\
\
\cf2 //(5*fGetSourceVolAtTheta.value( input, startT ))}